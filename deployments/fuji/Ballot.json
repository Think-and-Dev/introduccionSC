{
  "address": "0xae1B910094B38094E5cccA16791cEeD038677D22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6396d5727e56815bcac648c81bfe4091ff22b5c1d3dcd6fce4eed205d3d9957a",
  "receipt": {
    "to": null,
    "from": "0x27598400A96D4EE85f86b0931e49cBc02adD6dF0",
    "contractAddress": "0xae1B910094B38094E5cccA16791cEeD038677D22",
    "transactionIndex": 0,
    "gasUsed": "612486",
    "logsBloom": "0x
    "blockHash": "0x1f2a89447cf5d97f06759ce2e577e6ba0e7913851a56da12275b73c190606b00",
    "transactionHash": "0x6396d5727e56815bcac648c81bfe4091ff22b5c1d3dcd6fce4eed205d3d9957a",
    "logs": [],
    "blockNumber": 25956149,
    "cumulativeGasUsed": "612486",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x6233e241cc855e97d8583c560d8ce56c045abaa95f866e5beba70f04c93b1cce",
      "0xea6dad0ce6617f606e3301c61c1c24c544113410223153602cfc602d1820e016"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "f72c01c0ed29f2b16d6d6dd958f29d5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\"}},\"title\":\"Voting with delegation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new ballot to choose one of `proposalNames`.\"},\"delegate(address)\":{\"notice\":\"Delegate your vote to the voter `to`.\"},\"vote(uint256)\":{\"notice\":\"Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n/// @title Voting with delegation.\\ncontract Ballot {\\n    // This declares a new complex type which will\\n    // be used for variables later.\\n    // It will represent a single voter.\\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n\\n    // This is a type for a single proposal.\\n    struct Proposal {\\n        bytes32 name;   // short name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    // This declares a state variable that\\n    // stores a `Voter` struct for each possible address.\\n    mapping(address => Voter) public voters;\\n\\n    // A dynamically-sized array of `Proposal` structs.\\n    Proposal[] public proposals;\\n\\n    /// Create a new ballot to choose one of `proposalNames`.\\n    constructor(bytes32[] memory proposalNames) {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n\\n        // For each of the provided proposal names,\\n        // create a new proposal object and add it\\n        // to the end of the array.\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            // `Proposal({...})` creates a temporary\\n            // Proposal object and `proposals.push(...)`\\n            // appends it to the end of `proposals`.\\n            proposals.push(Proposal({\\n                name: proposalNames[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n\\n    // Give `voter` the right to vote on this ballot.\\n    // May only be called by `chairperson`.\\n    function giveRightToVote(address voter) external {\\n        // If the first argument of `require` evaluates\\n        // to `false`, execution terminates and all\\n        // changes to the state and to Ether balances\\n        // are reverted.\\n        // This used to consume all gas in old EVM versions, but\\n        // not anymore.\\n        // It is often a good idea to use `require` to check if\\n        // functions are called correctly.\\n        // As a second argument, you can also provide an\\n        // explanation about what went wrong.\\n        require(\\n            msg.sender == chairperson,\\n            \\\"Only chairperson can give right to vote.\\\"\\n        );\\n        require(\\n            !voters[voter].voted,\\n            \\\"The voter already voted.\\\"\\n        );\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /// Delegate your vote to the voter `to`.\\n    function delegate(address to) external {\\n        // assigns reference\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"You have no right to vote\\\");\\n        require(!sender.voted, \\\"You already voted.\\\");\\n\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\n\\n        // Forward the delegation as long as\\n        // `to` also delegated.\\n        // In general, such loops are very dangerous,\\n        // because if they run too long, they might\\n        // need more gas than is available in a block.\\n        // In this case, the delegation will not be executed,\\n        // but in other situations, such loops might\\n        // cause a contract to get \\\"stuck\\\" completely.\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n\\n        Voter storage delegate_ = voters[to];\\n\\n        // Voters cannot delegate to accounts that cannot vote.\\n        require(delegate_.weight >= 1);\\n\\n        // Since `sender` is a reference, this\\n        // modifies `voters[msg.sender]`.\\n        sender.voted = true;\\n        sender.delegate = to;\\n\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /// Give your vote (including votes delegated to you)\\n    /// to proposal `proposals[proposal].name`.\\n    function vote(uint proposal) external {\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /// @dev Computes the winning proposal taking all\\n    /// previous votes into account.\\n    function winningProposal() public view\\n            returns (uint winningProposal_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    // Calls winningProposal() function to get the index\\n    // of the winner contained in the proposals array and then\\n    // returns the name of the winner\\n    function winnerName() external view\\n            returns (bytes32 winnerName_)\\n    {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n}\",\"keccak256\":\"0xa80e3d768d283d9d52ae7fb57b4dc9501b0e9b5d0c63b105dc5a1e2f6d15ccf8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109c83803806109c883398101604081905261002f916100e2565b600080546001600160a01b03191633908117825581526001602081905260408220555b81518110156100c5576002604051806040016040528084848151811061007a5761007a61019f565b602090810291909101810151825260009181018290528354600181810186559483529181902083516002909302019182559190910151910155806100bd816101b5565b915050610052565b50506101dc565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100f557600080fd5b82516001600160401b038082111561010c57600080fd5b818501915085601f83011261012057600080fd5b815181811115610132576101326100cc565b8060051b604051601f19603f83011681018181108582111715610157576101576100cc565b60405291825284820192508381018501918883111561017557600080fd5b938501935b828510156101935784518452938501939285019261017a565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016101d557634e487b7160e01b600052601160045260246000fd5b5060010190565b6107dd806101eb6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd1461010d5780639e7b8d6114610123578063a3ec138d14610136578063e2ba53f0146101a757600080fd5b80630121b93f1461008d578063013cf08b146100a25780632e4176cf146100cf5780635c19a95c146100fa575b600080fd5b6100a061009b366004610700565b6101af565b005b6100b56100b0366004610700565b6102a9565b604080519283526020830191909152015b60405180910390f35b6000546100e2906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b6100a0610108366004610719565b6102d7565b610115610538565b6040519081526020016100c6565b6100a0610131366004610719565b6105b5565b610178610144366004610719565b600160208190526000918252604090912080549181015460029091015460ff82169161010090046001600160a01b03169084565b6040516100c6949392919093845291151560208401526001600160a01b03166040830152606082015260800190565b6101156106cd565b336000908152600160205260408120805490910361020b5760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600181015460ff16156102515760405162461bcd60e51b815260206004820152600e60248201526d20b63932b0b23c903b37ba32b21760911b6044820152606401610202565b6001818101805460ff191690911790556002808201839055815481549091908490811061028057610280610749565b906000526020600020906002020160010160008282546102a09190610775565b90915550505050565b600281815481106102b957600080fd5b60009182526020909120600290910201805460019091015490915082565b33600090815260016020526040812080549091036103375760405162461bcd60e51b815260206004820152601960248201527f596f752068617665206e6f20726967687420746f20766f7465000000000000006044820152606401610202565b600181015460ff16156103815760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b63932b0b23c903b37ba32b21760711b6044820152606401610202565b336001600160a01b038316036103d95760405162461bcd60e51b815260206004820152601e60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e00006044820152606401610202565b6001600160a01b03828116600090815260016020819052604090912001546101009004161561047d576001600160a01b03918216600090815260016020819052604090912001546101009004909116903382036104785760405162461bcd60e51b815260206004820152601960248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e2e000000000000006044820152606401610202565b6103d9565b6001600160a01b03821660009081526001602081905260409091208054909111156104a757600080fd5b600182810180546001600160a81b0319166101006001600160a01b03871602178217905581015460ff1615610519578154600282810154815481106104ee576104ee610749565b9060005260206000209060020201600101600082825461050e9190610775565b909155506105339050565b81548154829060009061052d908490610775565b90915550505b505050565b600080805b6002548110156105b057816002828154811061055b5761055b610749565b906000526020600020906002020160010154111561059e576002818154811061058657610586610749565b90600052602060002090600202016001015491508092505b806105a88161078e565b91505061053d565b505090565b6000546001600160a01b031633146106205760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206368616972706572736f6e2063616e2067697665207269676874206044820152673a37903b37ba329760c11b6064820152608401610202565b6001600160a01b0381166000908152600160208190526040909120015460ff161561068d5760405162461bcd60e51b815260206004820152601860248201527f54686520766f74657220616c726561647920766f7465642e00000000000000006044820152606401610202565b6001600160a01b038116600090815260016020526040902054156106b057600080fd5b6001600160a01b0316600090815260016020819052604090912055565b600060026106d9610538565b815481106106e9576106e9610749565b906000526020600020906002020160000154905090565b60006020828403121561071257600080fd5b5035919050565b60006020828403121561072b57600080fd5b81356001600160a01b038116811461074257600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156107885761078861075f565b92915050565b6000600182016107a0576107a061075f565b506001019056fea2646970667358221220b1049e5486d75501073a7fa645eb4d5a93782f00e2fd1b667ddd654623fb421264736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd1461010d5780639e7b8d6114610123578063a3ec138d14610136578063e2ba53f0146101a757600080fd5b80630121b93f1461008d578063013cf08b146100a25780632e4176cf146100cf5780635c19a95c146100fa575b600080fd5b6100a061009b366004610700565b6101af565b005b6100b56100b0366004610700565b6102a9565b604080519283526020830191909152015b60405180910390f35b6000546100e2906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b6100a0610108366004610719565b6102d7565b610115610538565b6040519081526020016100c6565b6100a0610131366004610719565b6105b5565b610178610144366004610719565b600160208190526000918252604090912080549181015460029091015460ff82169161010090046001600160a01b03169084565b6040516100c6949392919093845291151560208401526001600160a01b03166040830152606082015260800190565b6101156106cd565b336000908152600160205260408120805490910361020b5760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600181015460ff16156102515760405162461bcd60e51b815260206004820152600e60248201526d20b63932b0b23c903b37ba32b21760911b6044820152606401610202565b6001818101805460ff191690911790556002808201839055815481549091908490811061028057610280610749565b906000526020600020906002020160010160008282546102a09190610775565b90915550505050565b600281815481106102b957600080fd5b60009182526020909120600290910201805460019091015490915082565b33600090815260016020526040812080549091036103375760405162461bcd60e51b815260206004820152601960248201527f596f752068617665206e6f20726967687420746f20766f7465000000000000006044820152606401610202565b600181015460ff16156103815760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b63932b0b23c903b37ba32b21760711b6044820152606401610202565b336001600160a01b038316036103d95760405162461bcd60e51b815260206004820152601e60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e00006044820152606401610202565b6001600160a01b03828116600090815260016020819052604090912001546101009004161561047d576001600160a01b03918216600090815260016020819052604090912001546101009004909116903382036104785760405162461bcd60e51b815260206004820152601960248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e2e000000000000006044820152606401610202565b6103d9565b6001600160a01b03821660009081526001602081905260409091208054909111156104a757600080fd5b600182810180546001600160a81b0319166101006001600160a01b03871602178217905581015460ff1615610519578154600282810154815481106104ee576104ee610749565b9060005260206000209060020201600101600082825461050e9190610775565b909155506105339050565b81548154829060009061052d908490610775565b90915550505b505050565b600080805b6002548110156105b057816002828154811061055b5761055b610749565b906000526020600020906002020160010154111561059e576002818154811061058657610586610749565b90600052602060002090600202016001015491508092505b806105a88161078e565b91505061053d565b505090565b6000546001600160a01b031633146106205760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206368616972706572736f6e2063616e2067697665207269676874206044820152673a37903b37ba329760c11b6064820152608401610202565b6001600160a01b0381166000908152600160208190526040909120015460ff161561068d5760405162461bcd60e51b815260206004820152601860248201527f54686520766f74657220616c726561647920766f7465642e00000000000000006044820152606401610202565b6001600160a01b038116600090815260016020526040902054156106b057600080fd5b6001600160a01b0316600090815260016020819052604090912055565b600060026106d9610538565b815481106106e9576106e9610749565b906000526020600020906002020160000154905090565b60006020828403121561071257600080fd5b5035919050565b60006020828403121561072b57600080fd5b81356001600160a01b038116811461074257600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156107885761078861075f565b92915050565b6000600182016107a0576107a061075f565b506001019056fea2646970667358221220b1049e5486d75501073a7fa645eb4d5a93782f00e2fd1b667ddd654623fb421264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account."
      }
    },
    "title": "Voting with delegation.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new ballot to choose one of `proposalNames`."
      },
      "delegate(address)": {
        "notice": "Delegate your vote to the voter `to`."
      },
      "vote(uint256)": {
        "notice": "Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "chairperson",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)11_storage)"
      },
      {
        "astId": 27,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)16_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)16_storage)dyn_storage": {
        "base": "t_struct(Proposal)16_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)11_storage"
      },
      "t_struct(Proposal)16_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)11_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}